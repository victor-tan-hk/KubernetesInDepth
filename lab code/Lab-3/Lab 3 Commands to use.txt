


+++++ 4 Sample App for communication


++++ 4.2	Creating a deployment



+++ Changes to users-app.js

....
....
  try {
    // const hashedPW = await axios.get('http://auth/hashed-password/' + password);
    // Comment out the previous request
    const hashedPW = "dummy text";
    // since it's a dummy service, we don't really care for the hashed-pw either
    console.log(hashedPW, email);
    res.status(201).json({ message: 'User created!' });
  } catch (err) {
....
....

  // normally, we'd find a user by email and grab his/ her ID and hashed password
  const hashedPassword = password + '_hash';
  // const response = await axios.get(
  //   'http://auth/token/' + hashedPassword + '/' + password
  // );

  // Replace with a dummy response with status 200 and a dummy token

  const response = {status: 200, data : { token : 'abc'} };

....
....


++++ users-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-deployment
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: users
  template:
    metadata:
      labels:
        app: users
    spec:
      containers:
        - name: users
          image: dockerhubaccount/kub-demo-users
          ports:
            - containerPort: 8080  


+++ users-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: users-service
spec:
  selector:
    app: users
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080


++++ 5	Intra-pod container communication


+++ Modify users-app.js

....
....
....

  try {
    // Comment out the previous request
    // Specify name of auth-api app via environment variable

    const hashedPWAPI = `http://${process.env.AUTH_ADDRESS}/hashed-password/` + password;

    console.log("Sending GET request to ", hashedPWAPI)
    const response = await axios.get(hashedPWAPI);

    // const hashedPW = "dummy text";
    // since it's a dummy service, we don't really care for the hashed-pw either
    console.log("Received back a hashedPW : " + response.data.hashedPassword + " corresponding to email " + email);

    res.status(201).json({ message: 'User created!' });
  } catch (err) {


....
....
....

  // normally, we'd find a user by email and grab his/her ID and hashed password
  // here we just create a simple hardcoded hashed password
  const hashedPassword = password + '_hash';

  // Specify name of auth-api app via environment variable

  const tokenAPI = `http://${process.env.AUTH_ADDRESS}/token/` + hashedPassword + '/' + password;

  console.log("Sending GET request to ", tokenAPI);

  const response = await axios.get( tokenAPI );
  // Replace with a dummy response with status 200 and a dummy token
  // const response = {status: 200, data : { token : 'abc'} };

  if (response.status === 200) {
    console.log ("Received back token : " + response.data.token);
    return res.status(200).json({ token: response.data.token });
  }


....
....
....  


+++++ Modify docker-compose.yaml 

....
....
....  


  users:
    build: ./users-api
    environment:
      AUTH_ADDRESS: auth
    ports: 
      - "8080:8080"
  tasks:
....
....
....  


+++++ Modify users-deployment.yaml 


++++
++++

  template:
    metadata:
      labels:
        app: users
    spec:
      containers:
        - name: users
          image: workshopsrepos/kub-demo-users
          ports:
            - containerPort: 8080          
          env:
            - name: AUTH_ADDRESS
              value: localhost
        - name: auth
          image: workshopsrepos/kub-demo-auth
          ports:
            - containerPort: 80               
  

++++
++++
 

+++++ 6	Creating deployments for multiple pods

+++ auth-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: workshoprepos/kub-demo-auth
          ports:
            - containerPort: 80 

++++ users-deployment.yaml

....
....
....

    spec:
      containers:
        - name: users
          image: dockerhubaccount/kub-demo-users
          ports:
            - containerPort: 8080          
          env:
            - name: AUTH_ADDRESS
              value: localhost


+++++ auth-service.yaml 

apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80


++++ 7	Interpod communication

+++ 7.1	Using internal IP address of the service


+++ Change to users-deployment.yaml

    spec:
      containers:
        - name: users
          image: dockerhubaccount/kub-demo-users
          ports:
            - containerPort: 8080          
          env:
            - name: AUTH_ADDRESS
              value: "CLUSTERIP ADDRESS FOR auth-service"


+++++ 7.2	Using automatically generated environment variables


+++ Change to users-app.js

...
...
...
  // normally, we'd find a user by email and grab his/ her ID and hashed password
  // here we just create a simple hardcoded hashed password
  const hashedPassword = password + '_hash';

  // Specify name of auth-api app via Kubernetes 
  // auto generated environment variable xxxx_SERVICE_HOST

  const tokenAPI = `http://${process.env.AUTH_SERVICE_SERVICE_HOST}/token/` + hashedPassword + '/' + password;

  console.log("Sending GET request to ", tokenAPI);

...
...
...



++++ Change to docker-compose.yaml


….
…..
  users:
    build: ./users-api
    environment:
      AUTH_ADDRESS: auth
      AUTH_SERVICE_SERVICE_HOST: auth
    ports: 
      - "8080:8080"
  tasks:
….
….


+++++ 7.3	Using CoreDNS for internal domain names of services



kubectl run -it --rm dns-test --image=busybox --restart=Never -- nslookup users-service.default.svc.cluster.local


++++ Change to users-deployment.yaml

….
….
….
      containers:
        - name: users
          image: dockerhubaccount/kub-demo-users
          ports:
            - containerPort: 8080          
          env:
            - name: AUTH_ADDRESS
              value: "auth-service.default.svc.cluster.local"

+++++ 8	Adding the Task app as a deployment

++++ Modification to tasks-app.js

  if (!headers.authorization) {
    throw new Error('No token provided.');
  }
  const token = headers.authorization.split(' ')[1]; 
  // expects Bearer TOKEN whcih is the 2nd string after term Bearer  

  console.log("Token extracted is : ",token);

  const authVerifyAPIEndpoint = `http://${process.env.AUTH_ADDRESS}/verify-token/` + token;

  console.log("Making a call to verify the token to this API endpoint: ",authVerifyAPIEndpoint);

  const response = await axios.get(authVerifyAPIEndpoint);

  console.log("Got back a response with uid : ",response.data.uid);

  return response.data.uid;


+++ tasks-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-deployment
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: tasks
  template:
    metadata:
      labels:
        app: tasks
    spec:
      containers:
        - name: tasks
          image: dockerhubaccount/kub-demo-tasks
          env:
            - name: AUTH_ADDRESS
              value: "auth-service.default.svc.cluster.local"
            - name: TASKS_FOLDER
              value: tasks


+++ tasks-service.yaml  


apiVersion: v1
kind: Service
metadata:
  name: tasks-service
spec:
  selector:
    app: tasks
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000

++++ Change to docker-compose.yaml      

….
….
….
  tasks:
    build: ./tasks-api
    ports: 
      - "8000:8000"
    environment:
      TASKS_FOLDER: tasks
      AUTH_ADDRESS: auth    
  